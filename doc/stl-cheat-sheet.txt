string
    // initialization by character with number of occurence
    string str3(5, '#');
    // initialization by part of another string
    string str4(str1, 6, 6); // from 6th index (second parameter)
                             // 6 characters (third parameter)
    // initialization by part of another string : iteartor version
    string str5(str2.begin(), str2.begin() + 5);
    // clear function deletes all character from string
    str4.clear();
    //  both size() and length() return length of string and
    //  they work as synonyms
    int len = str6.length(); // Same as "len = str6.size();"
    char ch = str6.at(2); //  Same as "ch = str6[2];"
    //  front return first character and back returns last charcter
    //  of string
 
    char ch_f = str6.front();  // Same as "ch_f = str6[0];"
    char ch_b = str6.back();   // Same as below
                               // "ch_b = str6[str6.length() - 1];"
    // c_str returns null terminated char array version of string
    const char* charstr = str6.c_str();
    printf("%s\n", charstr);
    // append add the argument string at the end
    str6.append(" extension");
    //  same as str6 += " extension"
    // another version of appends, which appends part of other
    // string
    str4.append(str6, 0, 6);  // at 0th position 6 character
    //  find returns index where pattern is found.
    //  If pattern is not there it returns predefined
    //  constant npos whose value is -1
 
    if (str6.find(str4) != string::npos)
        cout << "str4 found in str6 at " << str6.find(str4)
             << " pos" << endl;
    else
        cout << "str4 not found in str6" << endl;
    //  substr(a, b) function returns a substring of b length
    //  starting from index a
    cout << str6.substr(7, 3) << endl;
 
    //  if second argument is not passed, string till end is
    // taken as substring
    cout << str6.substr(7) << endl;
 
    //  erase(a, b) deletes b character at index a
    str6.erase(7, 4);
    cout << str6 << endl;
 
    //  iterator version of erase
    str6.erase(str6.begin() + 5, str6.end() - 3);
    cout << str6 << endl;
 
    str6 = "This is a examples";
 
    //  replace(a, b, str)  replaces b character from a index by str
    str6.replace(2, 7, "ese are test");

lists
    front() – Returns reference to the first element in the list
    back() – Returns reference to the last element in the list
    push_front(g) – Adds a new element ‘g’ at the beginning of the list
    push_back(g) – Adds a new element ‘g’ at the end of the list
    pop_front() – Removes the first element of the list, and reduces size of the list by 1
    pop_back() – Removes the last element of the list, and reduces size of the list by 1
    begin() – Returns an iterator pointing to the first element of the list
    end() – Returns an iterator pointing to the theoretical last element which follows the last element
    empty() – Returns whether the list is empty(1) or not(0)
    insert() – Inserts new elements in the list before the element at a specified position
    erase() – Removes a single element or a range of elements from the list
    assign() – Assigns new elements to list by replacing current elements and resizes the list
    remove() – Removes all the elements from the list, which are equal to given element
    reverse() – Reverses the list
    size() – Returns the number of elements in the list
    sort() – Sorts the list in increasing order
map
    begin() – Returns an iterator to the first element in the map
    end() – Returns an iterator to the theoretical element that follows last element in the map
    size() – Returns the number of elements in the map
    max_size() – Returns the maximum number of elements that the map can hold
    empty() – Returns whether the map is empty
    pair insert(keyvalue,mapvalue) – Adds a new element to the map
    erase(iterator position) – Removes the element at the position pointed by the iterator
    erase(const g)- Removes the key value ‘g’ from the map
    clear() – Removes all the elements from the map
    key_comp() / value_comp() – Returns the object that determines how the elements in the map are ordered (‘<' by default)
    find(const g) – Returns an iterator to the element with key value ‘g’ in the map if found, else returns the iterator to end
    count(const g) – Returns the number of matches to element with key value ‘g’ in the map
    lower_bound(const g) – Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will not go before the element with key value ‘g’ in the map
    upper_bound(const g) – Returns an iterator to the first element that is equivalent to mapped value with key value ‘g’ or definitely will go after the element with key value ‘g’ in the map
queue
    empty() – Returns whether the queue is empty
    size() – Returns the size of the queue
    front() – Returns a reference to the first element of the queue
    back() – Returns a reference to the last element of the queue
    push(g) – Adds the element ‘g’ at the end of the queue
    pop() – Deletes the first element of the queue
set
    begin() – Returns an iterator to the first element in the set
    end() – Returns an iterator to the theoretical element that follows last element in the set
    size() – Returns the number of elements in the set
    max_size() – Returns the maximum number of elements that the set can hold
    empty() – Returns whether the set is empty
    pair <iterator, bool> insert(const g) – Adds a new element ‘g’ to the set
    iterator insert (iterator position, const g) – Adds a new element ‘g’ at the position pointed by iterator
    erase(iterator position) – Removes the element at the position pointed by the iterator
    erase(const g)- Removes the value ‘g’ from the set
    clear() – Removes all the elements from the set
    key_comp() / value_comp() – Returns the object that determines how the elements in the set are ordered (‘<‘ by default)
    find(const g) – Returns an iterator to the element ‘g’ in the set if found, else returns the iterator to end
    count(const g) – Returns 1 or 0 based on the element ‘g’ is present in the set or not.
    lower_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will not go before the element ‘g’ in the set
    upper_bound(const g) – Returns an iterator to the first element that is equivalent to ‘g’ or definitely will go after the element ‘g’ in the set
